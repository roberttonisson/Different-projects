{"ast":null,"code":"var _jsxFileName = \"D:\\\\icd0009-2019s\\\\Exam2019s\\\\exam-react\\\\src\\\\components\\\\views\\\\subject\\\\SubjectIndexTable.tsx\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { BaseCrudService } from \"../../../base/BaseCrudService\";\nimport { AppContext } from \"../../../context/AppContext\";\nimport jwt_decode from \"jwt-decode\";\n\nconst SubjectIndexTable = stuff => {\n  const [state, setState] = useState(stuff.subjects);\n  const appContext = useContext(AppContext);\n\n  const handleChange = target => {\n    setState({ ...state,\n      [target.name]: target.value\n    });\n  };\n\n  useEffect(() => {}, [state.length]);\n\n  async function enroll(subject, email) {\n    var user = {\n      email: email,\n      id: 'x',\n      firstName: '',\n      lastName: '',\n      code: ''\n    };\n    let dto = {\n      subject: subject,\n      appUser: user,\n      accepted: null,\n      id: ''\n    };\n    await BaseCrudService.createEntity(dto, 'StudentSubject/PostStudentSubject');\n    /* data(); */\n  }\n\n  function enrollOption(item) {\n    if (appContext.jwt == null) {\n      return /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }\n      });\n    } else {\n      var _item$studentSubjects, _item$studentSubjects2;\n\n      var subject = (_item$studentSubjects = (_item$studentSubjects2 = item.studentSubjects) === null || _item$studentSubjects2 === void 0 ? void 0 : _item$studentSubjects2.find(s => s != undefined && s.appUser != undefined && s.appUser.email == jwt_decode(appContext.jwt)['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'])) !== null && _item$studentSubjects !== void 0 ? _item$studentSubjects : null;\n\n      if (jwt_decode(appContext.jwt)['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'] == 'Teacher') {\n        return /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 25\n          }\n        });\n      } else if (subject == null && appContext.jwt != null) {\n        return /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"button\", {\n          onClick: () => enroll(item, jwt_decode(appContext.jwt)['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name']),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 21\n          }\n        }, \" Enroll \"));\n      } else if (subject.accepted == null) {\n        return /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }\n        }, \"Pending\");\n      } else if (subject.accepted == true) {\n        return /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 25\n          }\n        }, \"Accepted\");\n      } else if (subject.accepted == false) {\n        return /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 25\n          }\n        }, \"Denied\");\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, state.map(subject => {\n    var _subject$studentSubje;\n\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      key: subject.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }\n    }, subject.name), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }, subject.code), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }, subject.ects), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }\n    }, subject.semester), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }, subject.year), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, subject.description), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }, (_subject$studentSubje = subject.studentSubjects) === null || _subject$studentSubje === void 0 ? void 0 : _subject$studentSubje.filter(ss => ss.accepted).length), enrollOption(subject));\n  }));\n};\n\nexport default SubjectIndexTable;","map":{"version":3,"sources":["D:/icd0009-2019s/Exam2019s/exam-react/src/components/views/subject/SubjectIndexTable.tsx"],"names":["React","useState","useEffect","useContext","BaseCrudService","AppContext","jwt_decode","SubjectIndexTable","stuff","state","setState","subjects","appContext","handleChange","target","name","value","length","enroll","subject","email","user","id","firstName","lastName","code","dto","appUser","accepted","createEntity","enrollOption","item","jwt","studentSubjects","find","s","undefined","map","ects","semester","year","description","filter","ss"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport { IStudentSubject } from \"../../../domain/IStudentSubjectDTO\";\r\nimport { BaseCrudService } from \"../../../base/BaseCrudService\";\r\nimport { AppContext } from \"../../../context/AppContext\";\r\nimport { ISubject } from \"../../../domain/ISubject\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { IUser } from \"../../../domain/IUser\";\r\n\r\n\r\ninterface IProps {\r\n    subjects: ISubject[];\r\n}\r\n\r\nconst SubjectIndexTable = (stuff: IProps) => {\r\n    const [state, setState] = useState(stuff.subjects as ISubject[]);\r\n\r\n    const appContext = useContext(AppContext);\r\n\r\n    const handleChange = (target: EventTarget & HTMLInputElement) => {\r\n        setState({ ...state, [target.name]: target.value });\r\n    }\r\n\r\n    useEffect(() => {\r\n    }, [state.length]);\r\n\r\n    async function enroll(subject: ISubject, email: string) {\r\n        var user: IUser = { email: email, id: 'x', firstName: '', lastName: '', code: '' };\r\n\r\n        let dto: IStudentSubject = { subject: subject, appUser: user, accepted: null, id: '' };\r\n\r\n        await BaseCrudService.createEntity<IStudentSubject>(dto, 'StudentSubject/PostStudentSubject');\r\n        /* data(); */\r\n    }\r\n\r\n    function enrollOption(item: ISubject) {\r\n\r\n        if (appContext.jwt == null) {\r\n            return (<td></td>);\r\n        }\r\n        else {\r\n            var subject = item.studentSubjects?.find(s => s != undefined && s!.appUser != undefined && s.appUser.email == jwt_decode<any>(appContext.jwt!)['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name']) ?? null;\r\n            if (jwt_decode<any>(appContext.jwt!)['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'] == 'Teacher') {\r\n                return (<td></td>)\r\n            }\r\n            else if (subject == null && appContext.jwt != null) {\r\n                return (<td>\r\n                    <button onClick={() => enroll(item, jwt_decode<any>(appContext.jwt!)['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'])} > Enroll </button>\r\n                </td>);\r\n            }\r\n            else if (subject!.accepted == null) {\r\n                return (<td>Pending</td>);\r\n            }\r\n            else if (subject!.accepted == true) {\r\n                return (<td>Accepted</td>);\r\n            }\r\n            else if (subject!.accepted == false) {\r\n                return (<td>Denied</td>);\r\n            }\r\n        }\r\n        return (<td></td>);\r\n    }\r\n    return (<>\r\n\r\n        {state.map(subject => (\r\n\r\n            <tr key={subject.id}>\r\n                <td>\r\n                    {subject.name}\r\n                </td>\r\n                <td>\r\n                    {subject.code}\r\n                </td>\r\n                <td>\r\n                    {subject.ects}\r\n                </td>\r\n                <td>\r\n                    {subject.semester}\r\n                </td>\r\n                <td>\r\n                    {subject.year}\r\n                </td>\r\n                <td>\r\n                    {subject.description}\r\n                </td>\r\n                <td>\r\n                    {subject.studentSubjects?.filter(ss => ss.accepted).length}\r\n                </td>\r\n                {enrollOption(subject)}\r\n            </tr>\r\n        ))}\r\n\r\n    </>);\r\n}\r\nexport default SubjectIndexTable;"]},"metadata":{},"sourceType":"module"}