{"ast":null,"code":"import Axios from 'axios';\nimport { useContext } from 'react';\nimport { AppContext } from '../context/AppContext';\nexport class BaseService {\n  getJwt() {\n    let appContext = useContext(AppContext);\n    return appContext.jwt;\n  }\n\n  static async getEntities(view, jwt) {\n    try {\n      const response = await this.axios.get(view, {\n        headers: {\n          Authorization: \"Bearer \" + jwt\n        }\n      }); // happy case\n\n      if (response.status >= 200 && response.status < 300) {\n        return response.data;\n      } // something went wrong\n\n\n      return [];\n    } catch (reason) {\n      return [];\n    }\n  }\n\n  static async getEntity(id, view, jwt) {\n    try {\n      const response = await this.axios.get(view + '/' + id, {\n        headers: {\n          Authorization: \"Bearer \" + jwt\n        }\n      });\n\n      if (response.status >= 200 && response.status < 300) {\n        return response.data;\n      }\n\n      return null;\n    } catch (reason) {\n      return null;\n    }\n  }\n\n  static async getSingle(view, jwt) {\n    try {\n      const response = await this.axios.get(view, {\n        headers: {\n          Authorization: \"Bearer \" + jwt\n        }\n      });\n\n      if (response.status >= 200 && response.status < 300) {\n        return response.data;\n      }\n\n      return null;\n    } catch (reason) {\n      return null;\n    }\n  }\n\n  static async createEntity(entity, view, jwt) {\n    try {\n      const response = await this.axios.post(view, entity, {\n        headers: {\n          Authorization: \"Bearer \" + jwt\n        }\n      });\n\n      if (response.status >= 200 && response.status < 300) {\n        return response.status;\n      }\n\n      return response.status;\n    } catch (reason) {\n      return reason.status;\n    }\n  }\n\n  static async updateEntity(entity, view, jwt) {\n    try {\n      const response = await this.axios.put(view + '/' + entity.id, entity, {\n        headers: {\n          Authorization: \"Bearer \" + jwt\n        }\n      });\n\n      if (response.status >= 200 && response.status < 300) {\n        return response.status;\n      }\n\n      return response.status;\n    } catch (reason) {\n      return reason.status;\n    }\n  }\n\n  static async deleteEntity(id, view, jwt) {\n    try {\n      const response = await this.axios.delete(view + '/' + id, {\n        headers: {\n          Authorization: \"Bearer \" + jwt\n        }\n      });\n\n      if (response.status >= 200 && response.status < 300) {\n        return response.status;\n      }\n\n      return response.status;\n    } catch (reason) {\n      return reason.status;\n    }\n  }\n\n}\nBaseService.axios = Axios.create({\n  baseURL: \"https://localhost:5001/api/\",\n  headers: {\n    common: {\n      'Content-Type': 'application/json'\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/rober/Documents/Kool_robert/icd0009-2019s/EXAM/exam-react/src/base/BaseService.ts"],"names":["Axios","useContext","AppContext","BaseService","getJwt","appContext","jwt","getEntities","view","response","axios","get","headers","Authorization","status","data","reason","getEntity","id","getSingle","createEntity","entity","post","updateEntity","put","deleteEntity","delete","create","baseURL","common"],"mappings":"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","sourcesContent":["import { IBaseDomain } from './contracts/IBaseDomain';\r\nimport Axios from 'axios';\r\nimport { useContext } from 'react';\r\nimport { AppContext } from '../context/AppContext';\r\n\r\nexport abstract class BaseService {\r\n\r\n    getJwt() {\r\n        let appContext = useContext(AppContext);\r\n        return appContext.jwt;\r\n    }\r\n\r\n    static axios = Axios.create(\r\n        {\r\n            baseURL: \"https://localhost:5001/api/\",\r\n            headers: {\r\n                common: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            }\r\n        }\r\n    );\r\n\r\n    static async getEntities<T>(view: string, jwt?: string): Promise<T[]> {\r\n        try {\r\n            const response = await this.axios\r\n                .get(view, {\r\n                    headers: {\r\n                        Authorization: \"Bearer \" + jwt\r\n                    }\r\n                }\r\n                );\r\n            // happy case\r\n            if (response.status >= 200 && response.status < 300) {\r\n                return response.data;\r\n            }\r\n\r\n            // something went wrong\r\n            return [];\r\n\r\n        } catch (reason) {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    static async getEntity<T>(id: string, view: string, jwt?: string): Promise<T | null> {\r\n        try {\r\n            const response = await this.axios\r\n                .get(view + '/' + id, {\r\n                    headers: {\r\n                        Authorization: \"Bearer \" + jwt\r\n                    }\r\n                }\r\n                );\r\n\r\n            if (response.status >= 200 && response.status < 300) {\r\n                return response.data;\r\n            }\r\n\r\n            return null;\r\n\r\n        } catch (reason) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    static async getSingle<T>(view: string, jwt?: string): Promise<T | null> {\r\n        try {\r\n            const response = await this.axios\r\n                .get(view , {\r\n                    headers: {\r\n                        Authorization: \"Bearer \" + jwt\r\n                    }\r\n                }\r\n                );\r\n\r\n            if (response.status >= 200 && response.status < 300) {\r\n                return response.data;\r\n            }\r\n\r\n            return null;\r\n\r\n        } catch (reason) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    static async createEntity<T>(entity: T, view: string, jwt?: string): Promise<number> {\r\n        try {\r\n            const response = await this.axios\r\n                .post(view, entity, {\r\n                    headers: {\r\n                        Authorization: \"Bearer \" + jwt\r\n                    }\r\n                })\r\n\r\n            if (response.status >= 200 && response.status < 300) {\r\n\r\n                return response.status;\r\n            }\r\n\r\n            return response.status;\r\n        }\r\n        catch (reason) {\r\n            return reason.status;\r\n        }\r\n    }\r\n\r\n    static async updateEntity<T extends IBaseDomain>(entity: T, view: string, jwt?: string): Promise<number> {\r\n        try {\r\n            const response = await this.axios\r\n                .put(view + '/' + entity.id, entity, {\r\n                    headers: {\r\n                        Authorization: \"Bearer \" + jwt\r\n                    }\r\n                });\r\n\r\n            if (response.status >= 200 && response.status < 300) {\r\n                return response.status;\r\n            }\r\n            return response.status;\r\n        }\r\n        catch (reason) {\r\n            return reason.status;\r\n        }\r\n    }\r\n\r\n    static async deleteEntity(id: string, view: string, jwt?: string): Promise<number> {\r\n\r\n        try {\r\n            const response = await this.axios\r\n                .delete(view + '/' + id, {\r\n                    headers: {\r\n                        Authorization: \"Bearer \" + jwt\r\n                    }\r\n                });\r\n\r\n            if (response.status >= 200 && response.status < 300) {\r\n                return response.status;\r\n            }\r\n            return response.status;\r\n        }\r\n        catch (reason) {\r\n            return reason.status;\r\n        }\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}