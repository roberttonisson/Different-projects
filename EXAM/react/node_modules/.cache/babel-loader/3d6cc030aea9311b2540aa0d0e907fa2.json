{"ast":null,"code":"import Axios from 'axios';\nexport class AccountApi {\n  static async getJwt(loginDTO) {\n    const url = \"account/login\";\n\n    try {\n      const response = await this.axios.post(url, loginDTO);\n      console.log(response);\n\n      if (response.status === 200) {\n        return response.data.token;\n      }\n\n      return null;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  static async register(registerDTO) {\n    const url = \"account/register\";\n    const response = await this.axios.post(url, registerDTO);\n    return response.status;\n  }\n\n  static async getLoggedInUser(userName) {\n    try {\n      const response = await this.axios.get('account/usera/' + userName); // happy case\n\n      if (response.status >= 200 && response.status < 300) {\n        return response.data;\n      } // something went wrong\n\n\n      return null;\n    } catch (reason) {\n      return reason.statusText;\n    }\n  }\n\n  static async updateUser(user) {\n    try {\n      const response = await this.axios.put('account/update', user); // happy case\n\n      if (response.status >= 200 && response.status < 300) {\n        return response.status;\n      } // something went wrong\n\n\n      return response.status;\n    } catch (reason) {\n      return reason.statusText;\n    }\n  }\n\n}\nAccountApi.axios = Axios.create({\n  baseURL: \"https://localhost:5001/api/\",\n  headers: {\n    common: {\n      'Content-Type': 'application/json'\n    }\n  }\n});","map":{"version":3,"sources":["D:/Downloads/test-app/exam-react/src/services/AccountApi.ts"],"names":["Axios","AccountApi","getJwt","loginDTO","url","response","axios","post","console","log","status","data","token","error","register","registerDTO","getLoggedInUser","userName","get","reason","statusText","updateUser","user","put","create","baseURL","headers","common"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAQA,OAAO,MAAeC,UAAf,CAA0B;AAY7B,eAAaC,MAAb,CAAoBC,QAApB,EAAiE;AAC7D,UAAMC,GAAG,GAAG,eAAZ;;AACA,QAAI;AACA,YAAMC,QAAQ,GAAG,MAAM,KAAKC,KAAL,CAAWC,IAAX,CAAgCH,GAAhC,EAAqCD,QAArC,CAAvB;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;;AACA,UAAIA,QAAQ,CAACK,MAAT,KAAoB,GAAxB,EAA6B;AACzB,eAAOL,QAAQ,CAACM,IAAT,CAAcC,KAArB;AACH;;AACD,aAAO,IAAP;AACH,KAPD,CAOE,OAAOC,KAAP,EAAc;AACZ,aAAO,IAAP;AACH;AACJ;;AAED,eAAaC,QAAb,CAAsBC,WAAtB,EAAkE;AAC9D,UAAMX,GAAG,GAAG,kBAAZ;AACA,UAAMC,QAAQ,GAAG,MAAM,KAAKC,KAAL,CAAWC,IAAX,CAAgBH,GAAhB,EAAqBW,WAArB,CAAvB;AACA,WAAOV,QAAQ,CAACK,MAAhB;AACH;;AAED,eAAaM,eAAb,CAA6BC,QAA7B,EAAoF;AAChF,QAAI;AACA,YAAMZ,QAAQ,GAAG,MAAM,KAAKC,KAAL,CAAWY,GAAX,CAAe,mBAAmBD,QAAlC,CAAvB,CADA,CAGA;;AACA,UAAIZ,QAAQ,CAACK,MAAT,IAAmB,GAAnB,IAA0BL,QAAQ,CAACK,MAAT,GAAkB,GAAhD,EAAqD;AACjD,eAAOL,QAAQ,CAACM,IAAhB;AACH,OAND,CAQA;;;AACA,aAAO,IAAP;AACH,KAVD,CAUE,OAAOQ,MAAP,EAAe;AACb,aAAOA,MAAM,CAACC,UAAd;AACH;AACJ;;AAED,eAAaC,UAAb,CAAwBC,IAAxB,EAAoE;AAChE,QAAI;AACA,YAAMjB,QAAQ,GAAG,MAAM,KAAKC,KAAL,CAAWiB,GAAX,CAAe,gBAAf,EAAiCD,IAAjC,CAAvB,CADA,CAGA;;AACA,UAAIjB,QAAQ,CAACK,MAAT,IAAmB,GAAnB,IAA0BL,QAAQ,CAACK,MAAT,GAAkB,GAAhD,EAAqD;AACjD,eAAOL,QAAQ,CAACK,MAAhB;AACH,OAND,CAQA;;;AACA,aAAOL,QAAQ,CAACK,MAAhB;AACH,KAVD,CAUE,OAAOS,MAAP,EAAe;AACb,aAAOA,MAAM,CAACC,UAAd;AACH;AACJ;;AA9D4B;AAAXnB,U,CACHK,K,GAAQN,KAAK,CAACwB,MAAN,CACnB;AACIC,EAAAA,OAAO,EAAE,6BADb;AAEIC,EAAAA,OAAO,EAAE;AACLC,IAAAA,MAAM,EAAE;AACJ,sBAAgB;AADZ;AADH;AAFb,CADmB,C","sourcesContent":["import Axios from 'axios';\r\nimport { ILoginDTO } from '../domain/ILoginDTO';\r\nimport { IRegisterDTO } from '../domain/IRegisterDTO';\r\n\r\ninterface ILoginResponse {\r\n    token: string;\r\n    status: string;\r\n}\r\nexport abstract class AccountApi {\r\n    private static axios = Axios.create(\r\n        {\r\n            baseURL: \"https://localhost:5001/api/\",\r\n            headers: {\r\n                common: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            }\r\n        }\r\n    )\r\n\r\n    static async getJwt(loginDTO: ILoginDTO): Promise<string | null> {\r\n        const url = \"account/login\";\r\n        try {\r\n            const response = await this.axios.post<ILoginResponse>(url, loginDTO);\r\n            console.log(response)\r\n            if (response.status === 200) {\r\n                return response.data.token;\r\n            }\r\n            return null;\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    static async register(registerDTO: IRegisterDTO): Promise<number> {\r\n        const url = \"account/register\";\r\n        const response = await this.axios.post(url, registerDTO);\r\n        return response.status;\r\n    }\r\n\r\n    static async getLoggedInUser(userName: string | null): Promise<IRegisterDTO | null> {\r\n        try {\r\n            const response = await this.axios.get('account/usera/' + userName);\r\n\r\n            // happy case\r\n            if (response.status >= 200 && response.status < 300) {\r\n                return response.data;\r\n            }\r\n\r\n            // something went wrong\r\n            return null;\r\n        } catch (reason) {\r\n            return reason.statusText;\r\n        }\r\n    }\r\n\r\n    static async updateUser(user: IRegisterDTO | null): Promise<number> {\r\n        try {\r\n            const response = await this.axios.put('account/update', user)\r\n\r\n            // happy case\r\n            if (response.status >= 200 && response.status < 300) {\r\n                return response.status;\r\n            }\r\n\r\n            // something went wrong\r\n            return response.status;\r\n        } catch (reason) {\r\n            return reason.statusText;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}